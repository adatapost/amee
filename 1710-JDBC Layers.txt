JDBC Layers -- Creating models to separate the components or say "Layered components".
=======================================================================================
We can abstract some of the basic JDBC (low-level) actions by creating a following class.

public class Db implements AutoCloseable {   // This class can be used with try-with-resource
 //Define standards static fields or write code to load the properties
 private static final String URL = "jdbc:mysql://localhost";
 private static final String DRIVER = "jdbc.mysql.Driver";
 private static final String USER = "root";
 private static final String PASS = "";

 //JDBC fields
 private Connection cn;
 private PreparedStatement st;

 public Connection getCn() throws Exception { 
   return DriverManager.getConnection(URL, USER, PASS);
 }
 
 static {
//  Class.forName(DRIVER);
 }
 public Db(String sql) throws Exception {
  
    cn = getCn(); // obtain the connection
    st = cn.prepareStatement( sql );
 }

 public PrepareStatement getSt() throws Exception {  
   return st;
 }
 
 //Execute the non-query
 public int execute() throws Exception {
    return st.executeUpdate();
 }

 //Execute a query which returns single row -- first or single row 
 public Object [] row() throws Exception {
    try(ResultSet rs = st.executeQuery()) {
       if(rs.next()) {
          Object []ar = new Object[rs.getMetaData().getColumnCount()];
          //populate the array
          for(int i=0;i<ar.length;i++) {
             ar[i] = rs.getObject(i+1);
          }
        return ar;
      }
    }catch(Exception ex) {
        throw new Exception("Error while executing 'row' method",ex);
    }
   return null;
  }

//Execute a query and returns the List<Object[]> -- multiple records
 
 public List<Object[]> rows() throws Exception {
    List<Object[]> list = new ArrayList<>();
    try(ResultSet rs = st.executeQuery()) {
       while(rs.next()) {
           Object []ar = new Object[rs.getMetaData().getColumnCount()];
           for(int i=0;i<ar.length;i++) {
               ar[i] = rs.getObject(i);
            }
           list.add( ar );
       }//endWhile
     }catch(Exception ex) {
        throw new Exception("Error in 'rows'", ex);
    }
   return list;
  }

 public void close() throws Exception {
   if(st != null) st.close();
   if(cn != null) cn.close(); 
 }
}//EndClass

Tests in main method
====================
1.  
  try( Db x = new Db("insert into dept values (?,?)") ) {
     x.getSt().setInt(1,10);
     x.getSt().setString(2,"Account");
     x.execute();
  }catch(Exception ex) {
     System.out.println(ex);
  }

2. 
 try( Db x = new Db("delete from dept where dept_id=?") ) {
   x.getSt().setInt(1,10);
   x.execute();
 }catch(Exception ex) {
   System.out.println(ex);
 } 
3. Fetch / search single row
 try( Db x = new Db("select * from dept where dept_id=?")) {
   x.getSt().setInt(1,10);
   Object []ar = x.row();
   if(ar != null) {
      System.out.println(ar[0] + " " + ar[1]);
   } else {
      Ssytem.out.println("Not found!");
   }
 }catch(Exception ex) { System.out.println(ex); }
4. Fetch all depts
  try( Db x = new Db("select * from dept")) {
     for(Object []ar : x.rows() )
       System.out.println(ar[0] + " " + ar[1]);
   }catch(Exception ex) { System.out.println(ex); }


Database models and Database Access Layer (Or Database Access Object)
---------------------------------------------------------------------
For better code abstraction, we will create two more "layer" classes:
  1. Model or POJO and
  2. DAO or DAL

If we have following tables:

create table dept
(
  dept_id int primary key auto_increment,
  dept_name varchar2(30) unique not null
);

create table emp
(
 emp_id int primary key auto_increment,
 emp_name varchar2(20) not null,
 salary decimal(18,2) not null,
 join_date date not null,
 dept_id int not null,
 foreign key (dept_id) references dept(dept_id)
);

So we must have to create two POJOs or Beans,

public class Dept {
  private Integer deptId;
  private String deptName; 
  //TODO
}
NOTE: Use underscore to name the tables and fields in database and similarly use Java's naming conventions to design the beans.

public class Emp {
  private Integer empId;
  private String empName;
  private double salary;
  private java.time.LocalDate joinDate;
  private Integer deptId;

  //link or ref to dept
  private Dept dept;
  //TODO
}

Now create DAOs:

public class DeptDao {
  //static methods
  public static boolean add( Dept dept ) {
     try(Db x = new Db("insert into dept (dept_name) values (?)")) {
        x.getSt().setString(1, dept.getDeptName());
        return x.execute()>0;
     }catch(Exception ex) {
        System.err.println("Error while adding dept..." + ex);
     }
     return false;
  }
  public static boolean update( Dept dept ) {
     try(Db x = new Db("update dept set dept_name=? where dept_id=?")) {
        x.getSt().setString(1, dept.getDeptName());
        x.getSt().setInt(2, dept.getDeptId());
        return x.execute()>0;
     }catch(Exception ex) {
        System.err.println("Error while updating dept..." + ex);
     }
     return false;
  }
 public static boolean delete( Dept dept ) {
     try(Db x = new Db("delete from dept where dept_id=?")) {
        x.getSt().setInt(1, dept.getDeptId());
        return x.execute()>0;
     }catch(Exception ex) {
        System.err.println("Error while deleting dept..." + ex);
     }
     return false;
  }
 // search by deptId 
 public static Dept get(Dept dept) { 
   try(Db x = new Db("select * from dept where dept_id=?")) {
        x.getSt().setInt(1, dept.getDeptId());
        Object []ar = x.row();
        if(ar!=null) {
          return Dept( (Integer) ar[0], (String) ar[1] );
        }
     }catch(Exception ex) {
        System.err.println("Error while get a dept..." + ex);
     }
    return null;
 }  
 //Fetch all depts
 public static List<Dept> gets() { 
   List<Dept> list = new ArrayList<>();
   try(Db x = new Db("select * from dept order by dept_name")) {

      for(Object []ar : x.rows()) {
         Dept temp = Dept( (Integer) ar[0], (String) ar[1] );
         list.add( temp );
       }
     }catch(Exception ex) {
        System.err.println("Error while fetching depts..." + ex);
     }
    return list;
 }  
}//End class


Tests:
1.

 Dept d = new Dept("Account");
 if(DeptDao.add(d))
    System.out.println("Added");
 else 
    Ssytem.out.println("Can't add!");

2. 
 
 Dept search = DeptDao.get( new Dept(19) );
 if(search!=null) {
     System.out.println( search.getDeptId() +  "  " + search.getDeptName());
 }

3.

 Dept search = DeptDao.get( new Dept(19) );
 if(search!=null) {
     System.out.println( search.getDeptId() +  "  " + search.getDeptName());
      //Now update or delete record safely
     System.out.println(DeptDao.delete(search));
 }

4.
 Dept search = DeptDao.get( new Dept(19) );
 if(search!=null) {
     System.out.println( search.getDeptId() +  "  " + search.getDeptName());
      //Now update 
     search.setDeptName("HR");
     System.out.println(DeptDao.update(search));
 }
4. List all depts
 for(Dept dept : DeptDao.gets())
   System.out.println(dept);

NOTE: Use "generic or general purpose" parameter name and local variables. 
For instance we've public static boolean add(Dept dept) { } so dept is param that describe the a specific entity but we could use more general form like :  
      public static boolean add(Dept model) { .. }

Now, create a EmpDao:

public class EmpDao {
   public static boolean add( Emp model ) {  } 
   public static boolean update( Emp model ) {  } 
   public static boolean delete( Emp model ) {  } 
   public static Emp get( Emp model ) {  } 
   public static List<Emp> gets() {  } 
   public static List<Emp> gets(int deptId) {  } 
}

Use JOINS for get, gets method. Here is a code for get method:

 try(Db x = new Db("select * from emp join dept on emp.dept_id= dept.dept_id where emp_id=?")) {
    x.getSt().setInt(1, model.getEmpId() );
    Object []ar = x.row(); // returns an arrays 5 cols of emp + 2 cols of dept = 7
    if(ar!=null) {
       Emp tmp = new Emp();
       tmp.setEmpId( Util.toInt(ar[0]) ); // Design Util class to cast necesssary data
       tmp.setEmpName( ar[1].toString() );
       tmp.setSalary( Util.toDbl( ar[2] ));
       tmp.setJoinDate( Util.toLocalDate( ar[3] ));
       tmp.setDeptId( Util.toInt(ar[4]) );
       tmp.setDept( new Dept() );
       tmp.getDept().setDeptId( tmp.getDeptId() );
       tmp.getDept().setDeptName( ar[6].toString() );
       return tmp;
    }
 }catch(....) { .. }
 return null;


Now, we can add "sort" or "filter" methods in "EmpDao" class:

  public static void sort( List<Emp> list, Comparator<Emp> comparator) {
     list.sort( comparator );
  }
  public static void sortById( List<Emp> list) {
     list.sort( (p,q)->p.getEmpId() - q.getEmpId() );
  }

To filter we've to create an interface:

public MyPredicate<T> {
  boolean compare(T obj);
}

 //This is the manual method for each kind of search
 public static List<Emp> filterByJoinDate(List<Emp> list, LocalDate start, LocalDate end) {
    List<Emp> temp = new ArrayList<>();
    for(Emp e : list) {
         if(e.getJoinDate().isBefore(end) && e.getJoinDate().isAfter(start))
             temp.add( e );
    }
  return temp;
 }
 //following is general purpose search 
public static List<Emp> filter(List<Emp> list, MyPredicate  predicate) {
    List<Emp> temp = new ArrayList<>();
    for(Emp e : list) {
         if(predicate.compare(e))
             temp.add( e );
    }
  return temp;
 }

Here is how to call the filter() method:

    List<Emp> result = EmpDao.filter( list, (p)->p.getSalary()>=1000);
    List<Emp> result = EmpDao.filter( list, (p)->p.getSalary()>=1000 && p.getSalary()<=40000);
    List<Emp> result = EmpDao.filter( list, (p)->p.getDept().equals("HR"));



               
  
 