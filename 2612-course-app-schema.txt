Course application schema
==========================  

1. create table country (.. )
2. create table state (.. )
3. create table city (.. )
4. create table role ( role_id , role_name ) with following
    1  Admin
    2  Student
5. create table user
(
   user_id int primary key auto_increment,
   email varchar(255) not null unique,
   password varchar(70) not null,
   role_id int not null,
   created datetime,
   is_activate bit,
   foreign key (role_id) references role(role_id)
)
create table user_profile
(
  user_id int primary key,
  full_name varchar(200) not null,
  address varchar(400),
  city_id int not null,
  photo longblob,
  foreign key (user_id) references user(user_id),
  foreign key (city_id) references city(city_id)
)

create table business_domain ( domain_id, name )

create table institute 
(
   ins_id int prinary auto_increment,
   title varchar(100) not null,
   address varchar(500),
  city_id int not null,
   logo varchar(50),
   created_by int not null,
   domain_id int not null,
   email varchar(255) not null,
   phone1 varchar(15) not null,
   phone2 varchar(15) not null,
   fax varchar(15) not null,
  foreign key (created_by) references user(user_id),
  foreign key (city_id) references city(city_id),
  foreign key (domain_id) references business_domain(domain_id),
)

create table course or program
(
   course_id int primary key auto_increment,
   course_name varchar(255) not null,
   ins_id int not null,
   is_active bit, 
   course_desc varchar(600),
   course_fees varchar(50),
   updated datetime,
   created datetime,
  foreign key (ins_id) references institute(ins_id)
)

create table feed_back
(
   feed_id int primary key auto_increment,
   feed_desc varchar(700) not null,
   ins_id int not null,
   created datetime,
   user_id int,

  foreign key (ins_id) references institute(ins_id),
  foreign key (user_id) references user(user_id)
)

create table booking or inquiry
(
   id int primary key auto_increment,
   course_id int not null,
   created datetime,
   user_id int,
   payment_method varchar(50),   

  foreign key (course_id) references course(course_id),
  foreign key (user_id) references user(user_id)
)

create table receipt
(
   id int primary key auto_increment,
   course_id int not null,
   created datetime,
   user_id int,
   narration varchar(50),   
   amount int,

  foreign key (course_id) references course(course_id),
  foreign key (user_id) references user(user_id)
)

Admin:
 1. Can view , update or delete user accounts
 2. REview the user's profile
 3. Business domain - add/update/delete
 
Institute
  1. Add courses
  2. Update profile
  3. Booking
  4. Feeback

Student/User/Guest
   1. Search 
   2. Login, Registration ( Guest or Institute ), Recover password
   3. Booking
   4. Feeback
    


